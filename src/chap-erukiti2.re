= 学びのプロセスを詳細に分解する

//flushright{
@erukiti
//}


前の章では学びと切り離せない言語化について説明してきた。この章では学びのプロセスについて掘り下げてみよう。

何かを学ぶとき、どういうサイクルで学んでいるのだろうか？

== 学ぶサイクル

学びは一瞬で完結するものではない。それは時間をかけて繰り返される過程であり、各段階で意識的な取り組みが必要となる。学びのサイクルについて理解し、効果的に活用することが、確実な学びへの近道となる。

内容や難易度などによって詳細は変わってくるが、本格的な学びであれば以下の過程が含まれるだろう。

 * 現状と目標の明確化
 * 動機づけ
 * 計画
 * 実践
 * フィードバック
 * 学びの応用や、既存の学びとの統合
 * 評価と、さらなる繰り返し

== 現状と目標の明確化

学びの第一歩は、現状と目標を明確にすることだ。これは単なる目標設定以上の意味を持つ。現在の自分がどこにいて、どこに行きたいのかを具体的に言語化する過程である。

最近は高校などで情報の科目でPythonやJavaScriptを学習することもある時代だ。そこで「Pythonができるようになりたい」と考えたとしよう。

 * 現状: プログラミングできない
 * 目標: Pythonでプログラミングできるようになる

こういった大きな目標は、より詳細な目標に分割した方がいい。たとえば「Pythonの基本的な文法を覚えて理解する」「データ分析の基本的なライブラリを使って、数値分析をできるようになる」「pygameを使って簡単なゲームを作る」というように、具体的で小さな到達点を作る方がいい。

 * 現状: Pythonの文法はわかるしコピペで簡単なデータ分析はできるが、データの流れがあまり理解できていないので応用できない
 * 目標: データの流れを理解し、応用できるようにする

このような、現状と目標であれば、先ほどの事例よりはギャップが小さいし、何をすればいいのかが分かりやすいはずだ。たとえば、
最初から最後までデータがどういう風に加工されるのかを追いかけるという学習方法が思いつくようになる。

プログラミングができない状態から、Pythonでプログラミングできるようになると言えるようになるためには、こういう過程を繰り返すことになるだろう。

== 動機づけの重要性

学びのサイクルを継続的に回すためには、強い動機づけが不可欠だ。これは単なる「やる気」以上の、自分自身の本質的な動機を理解することを意味する。

動機には、外的動機と内的動機が存在する。

外的動機は、たとえば学校で授業を受けている場合だ。期間が区切られていて、その期間で一定以上の学びを得て、試験で点数を取らなければならない。社会人なら資格試験や社内での昇進試験のような形もあるだろう。

内的動機は、たとえば好奇心だ。筆者にとっては知的好奇心が最も強い動機となっている。新しい技術や概念を理解することそのものに喜びを見出す性質を持っている。もちろんこれは個人によって大きく異なる。昇進や収入増加をしたいという具体的な目標が動機となる人もいれば、他者との競争が原動力となる人もいるだろう。自分にとっての内的動機を言語化してみるべきだ。

受動的に学ぶひとは、おそらく能動的に学ぶ人に比べて効率が落ちるだろう。受動的な人は、本気になれない、自分事にできない、というのはよくある話だ。外的動機は必ずしもあるとは限らないし、内的動機の乏しい人もいるだろう。だが、内的にせよ外的にせよ、動機づけは重要だ。自分にとって効果的な動機を理解し、それを意識的に活用しよう。

===[column] 勉強嫌い

筆者の子どもの頃は、親や教師に強制される「勉強」がとても嫌いだった。他人から「勉めるを強いられる」のがとても嫌いでそれは今も変わっていない。それなら学ぶことは嫌いなのか？というとそうではない。知的好奇心が強いため、それを動機として何かを学ぶことそのものはむしろ好きなのだ。

学校の勉強でも好奇心ドリブンでやると、印象が変わるかもしれない。ゲームを作りたい人なら数学や物理との相性が良い。三角関数や行列演算やちょっとした力学はゲームを作るうえで頻繁に登場するものだから、ゲームを作りながらだったら、三角関数や行列も楽しめるかもしれない。

オタク趣味の人は、国語や歴史、あるいは社会なんかが「そういった目線」で楽しめるはずだ。ラノベを読みながら、気づいたら知らない単語、不確実な知識について、ひたすら検索したりWikipediaめぐりしてたなんてこともあるだろう。

もちろん、人によって内的動機は異なるため、このやり方が万人に効くわけではないが、参考になったら幸いである。

===[/column]

== 計画

資格試験の勉強のような、明確な目標を持つ学習では、戦略的なアプローチが効果的だ。これは単なる時間配分以上の、学習方法の最適化を意味する。たとえば、過去問の分析から苦手分野を特定し、それに重点的に取り組むといった具合だ。

対戦ゲーム、たとえば銃を撃ち合うゲームを考えてみよう。あなたが対戦で勝てるようになりたいとしてやるべきことには何があるだろうか？FPSの対戦で勝つための要素は多岐にわたる。エイム能力、反射神経、状況把握、位置取り、相手の心理を読む、味方とのコミュニケーションなどだ。どうやれば勝つために必要な要素を鍛えられるだろうか？そしてモチベーションを維持できるだろうか？辛い訓練では続かないかもしれない。ここらへんは効果的な動機づけが重要になってくる。

もっとも、すべての学びに詳細な計画が必要とは限らない。

不確実性の高い領域ではむしろ柔軟な姿勢が求められる。その場合「まずやってみる」「柔軟に考える」が最初の計画になるかもしれない。実際には、このまずやってみるという体育系めいたアプローチでも後で言語化が重要になってくるし、色々見えてきた段階で改めて計画を立てるべきだ。その計画はさらなる不確実性によって修正を余儀なくされる場合もあるだろう。その場合は小さな計画を立てることで柔軟に対応していくしかない。

== 実践

学びの実践として、たとえばプログラミングであればソースコードを書く、動かす、デバッグするなどがあるだろう。これはより直接的なアプローチだと考えられる。もちろん間接的なアプローチもある。プログラミングを学ぶ場合、他人のコードを読む、技術書を読む、コミュニティに参加するといったものだ。

さらには、そこから離れる、というアプローチも大切かもしれない。思いっきり考え抜いて、そのあと寝たらいい方法を思いついた。一日離れたら気分転換ができて、より集中できるようになった、みたいな話はよくある。

== フィードバックと改善

学びにおいて、実践と同じくらい重要なのがフィードバックだ。これは単なる結果の確認ではなく、学習過程全体を見直し、改善につなげる重要な段階である。

フィードバックの方法は学習内容によって異なる。プログラミングであれば静的解析ツールやコードレビューがあるだろう。最近ではAIによるコードレビューもできる時代だ。語学なら会話の録音分析、対戦ゲームであればリプレイの確認といった具合だ。

ここでは特に言語化が重要な役割を果たす。「なぜその方法を選んだのか」「どういうときに成功しやすく、失敗しやすいか」「どこで躓いたのか」などを明確に説明できればより効果的な改善が可能となる。

特に有効なのが、学びの過程をブログなどで発信することだ。これは自分の理解を確認する機会となるだけでなく、他者からのフィードバックを得る機会にもなる。

== 知識の統合と応用

学びは個別の知識やスキルの獲得で終わるものではない。獲得した知識を自分が既に持つものに統合し、新しい文脈で応用できるようになることで、真の理解が達成される。

たとえば、新しいプログラミング言語を学ぶ場合、単に文法を覚えるだけでなく、既に知っている言語との比較を通じて理解を深めることができる。これにより、プログラミング全般に対する理解が深まり、新しい言語の学習も容易になっていく。

プログラミングでいえば、プログラミング以外への応用もある。プログラミングではコンピュテーショナルシンキング、つまり問題を小さな部分に分解し、段階的に解決していく思考方法を身につけられる。この考え方は、大きなプロジェクトの管理や、複雑な課題の解決にも応用できる。

また、デバッグの過程で培われる論理的な問題追及の姿勢は、ビジネスにおける課題分析やトラブルシューティングにも活かせる。エラーの原因を特定し、効率的に解決策を見出すというプログラマーの日常的な作業は、様々な領域での問題解決に通じる普遍的なスキルとなる。

さらに、プログラミングで必須となる抽象化の考え方も、多くの場面で役立つ。複雑な現実の問題を単純なモデルに置き換えて考える能力は、ビジネス戦略の立案や意思決定の場面でも重要な武器となる。

もっと関係なさそうな事例を見てみよう。ゲームでいえば、ゲーム以外の知識や経験をゲームに活かす、その逆でゲームで得た物を他に活かすということもある。ボードゲームのように思考が重要なゲームを鍛え上げると、戦略的な思考力や計画性といった形で仕事に応用が利くことがある。オンラインゲームでギルドマスターをしていたひとが、実際にマネージメントをやっている事例もよく聞く。

このように、一見特定の分野に限定されると思われる学びであっても、その本質を理解し、異なる文脈に応用する視点を持つことで、より広い範囲での成長につながっていく。重要なのは、表面的な知識の獲得にとどまらず、その背後にある考え方や原理を理解し、柔軟に応用できる力を養うことなのだ。

== まとめ

学びのサイクルは、目標設定から実践、フィードバック、知識の統合まで、複数の段階から成る継続的なプロセスである。各段階で適切な言語化を行うことで、学びはより確実なものとなる。

このサイクルは決して固定的なものではない。内容や個人の特性に応じて柔軟に調整し、最も効果的な形を見つけていく必要がある。そのためには言語化が欠かせない。

また、この学びのサイクルをうまく回せること自体も学びだ。ゲームで言えば、経験値を倍増取得できるスキルのような、ぶっ壊れスキルだと言えるのではないだろうか。

このサイクルを回し続けることそのものが、生涯学習者としての成長につながっている。
