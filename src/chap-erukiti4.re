= 自己変容を受け入れる

//flushright{
@erukiti
//}

@<chapref>{chap-erukiti1}にて、学ぶとは自己変容であると書いたが、ここまで自己変容については触れてこなかった。この章では、学びにおいて意外と重要な自己変容について書いてみよう。

== 自己変容とは何か

学びによる自己変容とは、単なる知識の蓄積以上のものだ。それは、物事の見方や考え方、さらには自分自身に対する理解までもが変化していく過程を指す。時として、それは人生の大きな転換点ともなりうる。

プログラミングを例に考えてみよう。最初は「プログラミングは難しい」と感じていた人が、学びを重ねることで「プログラミングは工夫次第で実現できる」という考え方に変わっていく。これは単にプログラミングの技術を習得しただけでなく、問題に対するアプローチの仕方自体が変容したことを意味する。

== 大きな自己変容を受け入れる

自己変容には様々な規模がある。日々の小さな気づきによる変化もあれば、キャリアを大きく転換するような変化もある。

特に大きな自己変容は、勇気が必要だ。しかし、それを受け入れる準備ができていれば、新たな可能性が開かれる。たとえば、ある技術スタックから全く異なる技術スタックへの移行は、大きな自己変容を必要とする。しかし、それによって視野が広がり、より多くの選択肢が得られることもある。

マネージメントへの転向も、技術者にとって大きな自己変容の一つだ。プログラミングだけをやっている人はマネージメントを嫌がる傾向があるが、やってみると意外にできることもある。たとえばリーダーの素質なんてものは必要ない。リーダーをやるからこそリーダーができるようになるものなのだ。

== 自己変容を促進する指針

自己変容をより効果的に進めるために、以下のような指針が役立つ：

 * 「このままではうまくいかない」「このままでは目標に対してスケールしない」という直感を大切にする
 * 理想も現実も忘れない。理想があるからこそ自己変容したいし、現実的ではない理想は達成できない
 * 小さく刻む。大きな自己変容は無理でも、小さな自己変容を積み重ねることで理想に近づける
 * 理想を変えることを受け入れる。理想は、そのときの理想であって、未来永劫、それが理想とは限らない
 * 解決できない問題は棚上げする
 * 世の中にある手法をあれこれ自分の引き出しに入れる
 * ほどほどに言語化する。言語化は重要だが、すべてを言語化する必要はない
 * 考え方なんていつでも変えてもいいのだ。どうせ人間は様々な理由から矛盾を抱えずには生きていられない

これらの指針は、必ずしも全てを同時に実践する必要はない。状況に応じて、適切なものを選択して活用していけばよい。

===[column] 筆者の大きな自己変容体験

筆者は実に大きな自己変容を二度行っている。

一度目は、JavaScriptとフロントエンド、特にReactへの転向だった。元々筆者はWin32/UNIXアプリやバックエンド開発をしていたのだが、2013年にElectronと出会ってから、フロントエンド技術に魅せられた。2015年に登場したECMA Script 2015という、JavaScriptの今の形が定まったことで、あらゆる技術がJavaScriptに収束していく確信を得て、JavaScript/TypeScript一本に絞り込むという思い切った考えに掛けたのだ。

この転向から得た最大の学びは、技術の変遷を見極める目だ。新しい技術が登場したとき、それが一時的なブームなのか、本質的な変化なのかを見分ける力が磨かれた。また、一つの技術に深く入り込むことで、他の技術も理解しやすくなるという発見もあった。

2024年末である現代においてはJavaScript/TypeScriptとPythonが世界で最も使われている二大言語となった。つまり筆者は掛けに大勝ちできた。

次の大きな自己変容は、フロントエンドエンジニアとしてのキャリアを一旦置いて、LLM（大規模言語モデル）の社会実装に全力を注ぐ決断だった。2022年末にChatGPTと出会い、2023年3月頃の土日で、寝食を忘れて48時間耐久LLM研究をやってみたら、物の見事にLLMの魅力にとりつかれた。その後すぐ会社を辞める連絡をして、当時LLMで知り合った知人と一緒にやっていく決断をして、そのあとその人が新しく立ち上げた会社に入社することが決まった。

この二度目の転向では、直感を信じる勇気の重要性を学んだ。ChatGPTとの出会いは、まさに「これが未来を変える」という直感的な確信をもたらした。また、既存のキャリアを捨てるような大きな決断でも、それまでの経験は必ず新しいフィールドで活きることも実感として理解できた。

この大いなる掛けが、もう一度大勝ちをするか？はこれから歴史が証明することになる。

これらの大きな変化を可能にしたのは、強い知的好奇心だ。子どもの頃から極度に高い好奇心を持っていた筆者にとって、興味の対象を徹底的に探求することは自然なことだった。このような好奇心は、自己変容を受け入れる原動力となった。

===[/column]

== 自己変容の多様性

自己変容のプロセスは、人によって大きく異なる。筆者と同じように知的好奇心が原動力となるかもしれない。別の人にとっては、必要に迫られての変化かもしれない。勝負に勝つことが強いモチベーションの人もいる。

重要なのは、自分に合った形で自己変容を受け入れることだ。他人の変容のペースや方法と比較する必要はない。それぞれが自分のリズムで、自分に合った方法で変化していけばよい。

== 自己変容がうまくいかないとき

もちろん、すべての自己変容が成功するわけではない。筆者も、いくつかの失敗を経験してきた。

バックエンド時代、色々とうまくいかないことがあった。HaskellやScalaをチャレンジしてみたり、Go言語をチャレンジしてみたりDDDを勉強したりだ。これらは当時の実務としてはうまく活用できなかった。しかし、この「失敗」は別の形で実を結んだ。関数型言語の考え方はJavaScript/TypeScriptの世界では凄く重要だったし、DDDやGoもその後の設計方針に色々と反映された。

つまり、自己変容は必ずしも当初の目標通りの形で実を結ぶとは限らない。時には思わぬ副産物として、別の形で価値を生むこともある。

== まとめ

学びにおける自己変容は、避けて通れないプロセスである。それは時として不安や抵抗を伴うが、これらの感情は変化の自然な一部として受け入れることが重要だ。

自己変容は、必ずしも計画通りに進むとは限らない。時には失敗し、時には予想外の方向に進むこともある。しかし、その過程で得られる学びは、必ず何らかの形で価値を持つ。

重要なのは、変化を恐れず、かといって無理もせず、自分のペースで着実に前進していくことだ。そして、その過程で得られる気づきや学びを、次の変化への糧としていくことである。
