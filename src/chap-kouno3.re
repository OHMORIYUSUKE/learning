= 学びのために教育学の基本を勉強してみた！

//flushright{
	こうの@hk_it7
//}

== 一番「学び」を研究していそうな分野を勉強すれば学びを得られるのでは？

「学び」を考えたときに真っ先に浮かんだことは、自分はどうやって学んできたのだろうかということです。

自己学習も多かったですが、IT関係の知識以外の広範な基礎知識のほとんどは学校教育で習ったものです。

そこで多くの知識を与えるために体系化された「教育学」のエッセンスを学ぶことで、自分や他の人の学びにつなげることができるのではと考えました。

== 本章で取り上げる教育学的なアプローチ

とはいえ教育学は膨大で、それだけで大学のカリキュラムになってしまいます。そのため有名そうなところをつまみ食いして勉強し、それをまとめます。

本章で取り上げる教育学的なアプローチは次の通りです。

 * 4段階教授法
 * 5段階教授法
 * 9教授事象
 * プログラム学習の5原則
 * 問題解決学習
 * ADDIEモデル

では、順番に紹介していきます。

== 4段階教授法

4段階教授法は、学習者がなにかを学ぶメカニズムを4つの段階で定義したものです。

 * 明瞭：学ぶ事象を明瞭にする
 * 連合：明瞭化した事象を既知の概念と比較する
 * 系統：連合された物事を体系化する
 * 方法：系統化した事象をほかのものに応用可能にする

そもそもここで言う「教授」の前提には「管理」と「訓練」という2つの概念があります。

 * 管理：教育の妨げを除外する
 * 訓練：正しい方向に正す

一方で「教授」は教材を通して間接的に働きかけを行います。当然ながら学ぶ主体は学習者と教材側にあるわけです。

教授法と聞くと「教師がどのように教えるか」という概念のように思えますが、4つの段階を見ると学習者視点での知識獲得までの流れ示していることがわかります。

この4段階教授法は『一般教育学』にてヘルバルトによって示され、体系化したことにより「教育学」が学問分野として確立したきっかけになります。それまでの「教育」は「教育者」の経験や技能、感覚に基づくもので体系化されていませんでした。

ヘルバルトは経験のない人に一定の方針を出すことでベースアップを目指しました（教育的タクトというらしいです）。そのため、教師がどう教えるかではなく、学習者がどう学んでいるかを体系化し、レールを作ったということですね。

この4段階教授法は4段階目に「方法」として「応用可能にする」ところまでを知識獲得の定義にしていることが面白いところかと思います。つまりは暗記だけに終わるものは学習ではないということでしょうか。耳が痛いです。

ここからは新たなプログラミング言語の習得という具体例を使い、4段階教授法を深堀りしようと思います。

=== 明瞭：学ぶ事象を明瞭にする

まずは学ぶ対象を明確化します。ここではTypeScriptを学ぶことを想定します。

もともと別の言語を習得している人が学ぶという前提に立つと、ここでの学びの対象はアルゴリズムやデータ構造ではなく文法がメインになりますね。

JavaScriptをすでに習得している場合、さらに具体化して「型定義や型システムについて」が学ぶ対象になります。

それらについて明確な知識にします。

 * 文法は基本的にJavaScriptと一緒
 * 型の記述がとても柔軟
 * 型システムは構造的部分型

=== 連合：明瞭化した事象を既知の概念と比較する

続いて明確になった知識を既知の概念と比較していきます。

TypeScriptを学んでいくなかで以下のようなことに気づいていきます。

 * 型システムがJava（公称型）とは異なる
 * Javaと同じように型を扱うにはclassにしてprivateな変数を持つ
 * 型システムがGo（構造的部分型）と少し似ている
 * JavaScriptに対して新しい文法も入っている
 * SassとCSSの関係のようにトランスパイルする

=== 系統：連合された物事を体系化する

他の言語と比較してTypeScriptの特徴が見えてきました。それらを少し抽象化してみます。

 * 構造的部分型は型のインターフェイスに注目して型を判別する
 * スーパーセットとトランスパイルによって既存言語を大きく拡張できる

などなど、学べば学ぶほどここで列挙しきれないほどの特徴が見えてくることでしょう。

=== 方法：系統化した事象をほかのものに応用可能にする

さて、最後に応用可能な状態にしましょう。

例えば次のようなものです。

 * 構造的部分型と公称型というものがあり、他の型付け言語もこれらの考えを持っている
 * トランスパイルすることでベースの言語のエコシステムに乗っかることができる

上記の知識が定着すれば、さらに別の言語を学ぶ際に、「JavaとKotlinの関係性はJavaScriptとTypeScriptに似ている」や「PHPのPHPStanはTypeScriptの型システムっぽい」等の気づきが得られます。

これは応用可能な状態になっていると言えそうです。

== 5段階教授法

続いて5段階教授法についてです。これはツィラーのものとラインのものがありますので、まずはそれぞれを説明します。

=== ツィラーの5段階教授法は4段階教授法の順当な発展形

ツィラーはヘルバルトの4段階教授法における「明瞭」を2つに分割して以下の5段階教授法を示しました。

 * 分析
 * 総合
 * 連合
 * 体系
 * 方法

ツィラーの5段階教授法も学習者がどう学んでいくかに焦点を当てたものです。

「明瞭」で学ぶ対象がどんなものであるかを調べていきますが、その過程は「分析」と「総合」からなるとしました。

「分析」では対象を細かく見て単純な構造の組み合わせとして捉えるようにしていき、「総合」では「分析」で明らかにした単純な構造を再構築します。

これは具体と抽象を行き来する過程に似ています。「分析」と「総合」を通して学びを深めていくことを意味します。

=== ラインの5段階教授法は教師側に対する論理

一方、ラインは教師側から教授法を再定義しました。ラインが示した5つの段階は次の通りです。

 * 予備
 * 提示
 * 比較
 * 概括
 * 応用


ここからはラインの5段階教授法について詳しく見ていきます。